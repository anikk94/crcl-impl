// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.17020
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

// 
//This source code was auto-generated by MonoXSD
//
namespace Schemas.CRCL.Status {
    
    
    /// <remarks>
///
///        CRCLStatusType is derived from DataThingType.
///        An instance of CRCLStatusType has the following elements:
///          Name (inherited, optional)
///          CommandStatus
///          JointStatuses (optional)
///          PoseStatus (optional)
///          GripperStatus (optional)
///          SettingsStatus (optional).
///
///        Status is returned periodically by the controller.
///
///        See notes at the beginning of this file regarding configuring
///        CRCL status messages.
///
///        GripperStatus should not be reported when there is no gripper
///        and should be reported when there is a gripper.
///
///        The coordinate system in which the Pose is reported is always
///        robot coordinates.
///
///        If CRCL status is being reported on separate channels for both
///        a robot and a gripper, the status reported on the robot
///        channel should include a Pose, while the status reported on the
///        gripper channel should not include a Pose.
///      
///</remarks>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("CRCLStatus")]
    public partial class CRCLStatusType : DataThingType {
        
        private CommandStatusType commandStatusField;
        
        private JointStatusesType jointStatusesField;
        
        private PoseStatusType poseStatusField;
        
        private GripperStatusType gripperStatusField;
        
        private SettingsStatusType settingsStatusField;
        
        /// <remarks/>
        public CommandStatusType CommandStatus {
            get {
                return this.commandStatusField;
            }
            set {
                this.commandStatusField = value;
            }
        }
        
        /// <remarks/>
        public JointStatusesType JointStatuses {
            get {
                return this.jointStatusesField;
            }
            set {
                this.jointStatusesField = value;
            }
        }
        
        /// <remarks/>
        public PoseStatusType PoseStatus {
            get {
                return this.poseStatusField;
            }
            set {
                this.poseStatusField = value;
            }
        }
        
        /// <remarks/>
        public GripperStatusType GripperStatus {
            get {
                return this.gripperStatusField;
            }
            set {
                this.gripperStatusField = value;
            }
        }
        
        /// <remarks/>
        public SettingsStatusType SettingsStatus {
            get {
                return this.settingsStatusField;
            }
            set {
                this.settingsStatusField = value;
            }
        }
    }
    
    /// <remarks>
///
///        CommandStatusType is derived from DataThingType.
///        An instance of CommandStatusType has the following elements:
///          Name (inherited, optional)
///          CommandID
///          StatusID
///          CommandState
///          StateDescription (optional)
///          ProgramFile (optional)
///          ProgramIndex (optional)
///          ProgramLength (optional).
///
///        The CommandStatusType relates the execution status of the
///        currently executing command (or the most recently executed
///        command, if there is no current command).
///          CommandID echoes the command id from the received command to
///            which the status message applies
///          StatusID is an ID associated with this particular status
///             message.
///          StateDescription is an optional brief description of the state
///          such as "Joint 3 at -171.0 less than limit -170.0" or 
///          "Waiting for Operator".
///          ProgramFile provides an optional reference if the currently executing 
///             command is known to have come from a particular file.
///          ProgramIndex provoides an optional reference to the element within a 
///             program. If the currently executing command is known to have come 
///             from a particular file. The InitCanon command will have index 0, 
///             and first MiddleCommand will have index 1.
///          ProgramLength is the number of commands in the current program if 
///             known.
///          
///          
///          
///        The combination of StatusID and CommandID must be unique
///        within a session.
///      
///</remarks>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CommandStatusType : DataThingType {
        
        private long commandIDField;
        
        private long statusIDField;
        
        private CommandStateEnumType commandStateField;
        
        private string stateDescriptionField;
        
        private string programFileField;
        
        private int programIndexField;
        
        private bool programIndexSpecifiedField;
        
        private int programLengthField;
        
        private bool programLengthSpecifiedField;
        
        /// <remarks/>
        public long CommandID {
            get {
                return this.commandIDField;
            }
            set {
                this.commandIDField = value;
            }
        }
        
        /// <remarks/>
        public long StatusID {
            get {
                return this.statusIDField;
            }
            set {
                this.statusIDField = value;
            }
        }
        
        /// <remarks/>
        public CommandStateEnumType CommandState {
            get {
                return this.commandStateField;
            }
            set {
                this.commandStateField = value;
            }
        }
        
        /// <remarks/>
        public string StateDescription {
            get {
                return this.stateDescriptionField;
            }
            set {
                this.stateDescriptionField = value;
            }
        }
        
        /// <remarks/>
        public string ProgramFile {
            get {
                return this.programFileField;
            }
            set {
                this.programFileField = value;
            }
        }
        
        /// <remarks/>
        public int ProgramIndex {
            get {
                return this.programIndexField;
            }
            set {
                this.programIndexField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnore()]
        public virtual bool ProgramIndexSpecified {
            get {
                return this.programIndexSpecifiedField;
            }
            set {
                this.programIndexSpecifiedField = value;
            }
        }
        
        /// <remarks/>
        public int ProgramLength {
            get {
                return this.programLengthField;
            }
            set {
                this.programLengthField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnore()]
        public virtual bool ProgramLengthSpecified {
            get {
                return this.programLengthSpecifiedField;
            }
            set {
                this.programLengthSpecifiedField = value;
            }
        }
    }
    
    /// <remarks>
///
///        CommandStateEnumType enumerates the command states that may be used
///        to describe command status.
///
///        CRCL_Done means that the most recent command is done.
///
///        CRCL_Error means that the most recent command resulted in an error
///        of some sort.
///
///        CRCL_Working means that the most recent command is being executed,
///        and no error has occurred so far, but execution of the command
///        is not yet done.
///
///        CRCL_Ready means that the robot is ready to receive commands but
///        has not yet received a command.
///      
///</remarks>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
    [System.SerializableAttribute()]
    public enum CommandStateEnumType {
        
        /// <remarks/>
        CRCL_Done,
        
        /// <remarks/>
        CRCL_Error,
        
        /// <remarks/>
        CRCL_Working,
        
        /// <remarks/>
        CRCL_Ready,
    }
    
    /// <remarks>
///
///        An instance of DataThingType has the following elements:
///          Name (optional)
///          .
///
///        DataThingType is an abstract type from which more specific types
///        of data thing are derived. That includes all complex data
///        types such as Vector, PoseType, etc.
///      
///</remarks>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CRCLStatusType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CommandStatusType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GripperStatusType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ParallelGripperStatusType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ThreeFingerGripperStatusType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(VacuumGripperStatusType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(JointStatusesType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(JointStatusType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(JointLimitType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(PoseStatusType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(SettingsStatusType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(PoseType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(TwistType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(WrenchType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ParameterSettingType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(PoseToleranceType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(PointType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(RotAccelType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(RotAccelAbsoluteType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(RotAccelRelativeType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(RotSpeedType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(RotSpeedAbsoluteType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(RotSpeedRelativeType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(TransAccelType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(TransAccelAbsoluteType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(TransAccelRelativeType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(TransSpeedType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(TransSpeedAbsoluteType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(TransSpeedRelativeType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(VectorType))]
    public partial class DataThingType {
        
        private string nameField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(DataType="ID")]
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
    }
    
    /// <remarks>
///
///        The abstract GripperStatusType is derived from DataThingType.
///        An instance of GripperStatusType has the following elements:
///          Name (inherited, optional)
///          GripperName
///          HoldingObject (optional).
/// 
///        GripperStatusType is an abstract type from which more specialized
///        types of gripper status are derived. HoldingObject is true if the 
///          gripper is expected to be holding an object given its position and/or 
///          pressure sensors on the finger tips.
///      
///</remarks>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ParallelGripperStatusType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ThreeFingerGripperStatusType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(VacuumGripperStatusType))]
    public partial class GripperStatusType : DataThingType {
        
        private string gripperNameField;
        
        private bool holdingObjectField;
        
        private bool holdingObjectSpecifiedField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(DataType="NMTOKEN")]
        public string GripperName {
            get {
                return this.gripperNameField;
            }
            set {
                this.gripperNameField = value;
            }
        }
        
        /// <remarks/>
        public bool HoldingObject {
            get {
                return this.holdingObjectField;
            }
            set {
                this.holdingObjectField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnore()]
        public virtual bool HoldingObjectSpecified {
            get {
                return this.holdingObjectSpecifiedField;
            }
            set {
                this.holdingObjectSpecifiedField = value;
            }
        }
    }
    
    /// <remarks>
///
///        "ParallelGripperStatusType is derived from GripperStatusType.
///        An instance of ParallelGripperStatusType has the following elements:
///          Name (inherited, optional)
///          GripperName (inherited)
///          Separation.
/// 
///        ParallelGripperStatusType gives gripper status for a parallel
///        jaw gripper. The Separation element gives the distance between
///        the jaws in length units.
///      
///</remarks>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ParallelGripperStatusType : GripperStatusType {
        
        private double separationField;
        
        /// <remarks/>
        public double Separation {
            get {
                return this.separationField;
            }
            set {
                this.separationField = value;
            }
        }
    }
    
    /// <remarks>
///
///        ThreeFingerGripperStatusType is derived from GripperStatusType.
///        An instance of ThreeFingerGripperStatusType has the following elements:
///          Name (inherited, optional)
///          GripperName (inherited)
///          Finger1Position (optional)
///          Finger2Position (optional)
///          Finger3Position (optional)
///          Finger1Force (optional)
///          Finger2Force (optional)
///          Finger3Force (optional).
/// 
///        ThreeFingerGripperStatusType gives gripper status for a three
///        finger gripper. The fingers are assumed to be non-articulated.
///        Finger position is 0.0 at fully closed and 1.0 at fully open and
///        linear in either angle or distance for rotating fingers or
///        sliding fingers, respectively. All elements are optional, but
///        typically all three positions will be used if any one of
///        them is used, and similarly for the three forces.
///
///        Force units are as set by the most recent SetForceUnits command.
///        The system sending CRCL commands and the system executing them
///        must agree on which fingers are Finger1, Finger2,and Finger3.
///      
///</remarks>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ThreeFingerGripperStatusType : GripperStatusType {
        
        private double finger1PositionField;
        
        private bool finger1PositionSpecifiedField;
        
        private double finger2PositionField;
        
        private bool finger2PositionSpecifiedField;
        
        private double finger3PositionField;
        
        private bool finger3PositionSpecifiedField;
        
        private double finger1ForceField;
        
        private bool finger1ForceSpecifiedField;
        
        private double finger2ForceField;
        
        private bool finger2ForceSpecifiedField;
        
        private double finger3ForceField;
        
        private bool finger3ForceSpecifiedField;
        
        /// <remarks/>
        public double Finger1Position {
            get {
                return this.finger1PositionField;
            }
            set {
                this.finger1PositionField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnore()]
        public virtual bool Finger1PositionSpecified {
            get {
                return this.finger1PositionSpecifiedField;
            }
            set {
                this.finger1PositionSpecifiedField = value;
            }
        }
        
        /// <remarks/>
        public double Finger2Position {
            get {
                return this.finger2PositionField;
            }
            set {
                this.finger2PositionField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnore()]
        public virtual bool Finger2PositionSpecified {
            get {
                return this.finger2PositionSpecifiedField;
            }
            set {
                this.finger2PositionSpecifiedField = value;
            }
        }
        
        /// <remarks/>
        public double Finger3Position {
            get {
                return this.finger3PositionField;
            }
            set {
                this.finger3PositionField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnore()]
        public virtual bool Finger3PositionSpecified {
            get {
                return this.finger3PositionSpecifiedField;
            }
            set {
                this.finger3PositionSpecifiedField = value;
            }
        }
        
        /// <remarks/>
        public double Finger1Force {
            get {
                return this.finger1ForceField;
            }
            set {
                this.finger1ForceField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnore()]
        public virtual bool Finger1ForceSpecified {
            get {
                return this.finger1ForceSpecifiedField;
            }
            set {
                this.finger1ForceSpecifiedField = value;
            }
        }
        
        /// <remarks/>
        public double Finger2Force {
            get {
                return this.finger2ForceField;
            }
            set {
                this.finger2ForceField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnore()]
        public virtual bool Finger2ForceSpecified {
            get {
                return this.finger2ForceSpecifiedField;
            }
            set {
                this.finger2ForceSpecifiedField = value;
            }
        }
        
        /// <remarks/>
        public double Finger3Force {
            get {
                return this.finger3ForceField;
            }
            set {
                this.finger3ForceField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnore()]
        public virtual bool Finger3ForceSpecified {
            get {
                return this.finger3ForceSpecifiedField;
            }
            set {
                this.finger3ForceSpecifiedField = value;
            }
        }
    }
    
    /// <remarks>
///
///        VacuumGripperStatusType is derived from GripperStatusType.
///        An instance of VacuumGripperStatusType has the following elements:
///          Name (inherited, optional)
///          GripperName (inherited)
///          IsPowered.
/// 
///        VacuumGripperStatusType gives gripper status for a vacuum
///        gripper. The IsPowered element is true if a vacuum is being
///        applied and is false if not.
///      
///</remarks>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class VacuumGripperStatusType : GripperStatusType {
        
        private bool isPoweredField;
        
        /// <remarks/>
        public bool IsPowered {
            get {
                return this.isPoweredField;
            }
            set {
                this.isPoweredField = value;
            }
        }
    }
    
    /// <remarks>
///
///        JointStatusesType is derived from DataThingType.
///        An instance of JointStatusesType has the following elements:
///          Name (inherited, optional)
///          JointStatus (multiple).
/// 
///        Each JointStatus element gives the status of one joint. No
///        joint may be reported more than once in an instance of
///        JointStatusesType. See notes at the beginning of this file
///        regarding configuring joint status.
///      
///</remarks>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class JointStatusesType : DataThingType {
        
        private JointStatusType[] jointStatusField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("JointStatus")]
        public JointStatusType[] JointStatus {
            get {
                return this.jointStatusField;
            }
            set {
                this.jointStatusField = value;
            }
        }
    }
    
    /// <remarks>
///
///        JointStatusType is derived from DataThingType.
///        JointStatusType reports the status of one joint.
///        An instance of JointStatusType has the following elements:
///          Name (inherited, optional)
///          JointNumber
///          JointPosition (optional)
///          JointTorqueOrForce (optional)
///          JointVelocity (optional).
///
///      
///</remarks>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class JointStatusType : DataThingType {
        
        private int jointNumberField;
        
        private double jointPositionField;
        
        private bool jointPositionSpecifiedField;
        
        private double jointTorqueOrForceField;
        
        private bool jointTorqueOrForceSpecifiedField;
        
        private double jointVelocityField;
        
        private bool jointVelocitySpecifiedField;
        
        /// <remarks/>
        public int JointNumber {
            get {
                return this.jointNumberField;
            }
            set {
                this.jointNumberField = value;
            }
        }
        
        /// <remarks/>
        public double JointPosition {
            get {
                return this.jointPositionField;
            }
            set {
                this.jointPositionField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnore()]
        public virtual bool JointPositionSpecified {
            get {
                return this.jointPositionSpecifiedField;
            }
            set {
                this.jointPositionSpecifiedField = value;
            }
        }
        
        /// <remarks/>
        public double JointTorqueOrForce {
            get {
                return this.jointTorqueOrForceField;
            }
            set {
                this.jointTorqueOrForceField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnore()]
        public virtual bool JointTorqueOrForceSpecified {
            get {
                return this.jointTorqueOrForceSpecifiedField;
            }
            set {
                this.jointTorqueOrForceSpecifiedField = value;
            }
        }
        
        /// <remarks/>
        public double JointVelocity {
            get {
                return this.jointVelocityField;
            }
            set {
                this.jointVelocityField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnore()]
        public virtual bool JointVelocitySpecified {
            get {
                return this.jointVelocitySpecifiedField;
            }
            set {
                this.jointVelocitySpecifiedField = value;
            }
        }
    }
    
    /// <remarks>
///
///        JointLimitType is derived from DataThingType.
///        JointLimitType reports the limits of one joint.
///        An instance of JointStatusType has the following elements:
///          Name (inherited, optional)
///          JointNumber
///          JointMinPosition (optional)
///          JointMaxPosition (optional)
///          JointMaxTorqueOrForce (optional)
///          JointMaxVelocity (optional).
///
///      
///</remarks>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class JointLimitType : DataThingType {
        
        private int jointNumberField1;
        
        private double jointMinPositionField;
        
        private bool jointMinPositionSpecifiedField;
        
        private double jointMaxPositionField;
        
        private bool jointMaxPositionSpecifiedField;
        
        private double jointMaxTorqueOrForceField;
        
        private bool jointMaxTorqueOrForceSpecifiedField;
        
        private double jointMaxVelocityField;
        
        private bool jointMaxVelocitySpecifiedField;
        
        /// <remarks/>
        public int JointNumber {
            get {
                return this.jointNumberField1;
            }
            set {
                this.jointNumberField1 = value;
            }
        }
        
        /// <remarks/>
        public double JointMinPosition {
            get {
                return this.jointMinPositionField;
            }
            set {
                this.jointMinPositionField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnore()]
        public virtual bool JointMinPositionSpecified {
            get {
                return this.jointMinPositionSpecifiedField;
            }
            set {
                this.jointMinPositionSpecifiedField = value;
            }
        }
        
        /// <remarks/>
        public double JointMaxPosition {
            get {
                return this.jointMaxPositionField;
            }
            set {
                this.jointMaxPositionField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnore()]
        public virtual bool JointMaxPositionSpecified {
            get {
                return this.jointMaxPositionSpecifiedField;
            }
            set {
                this.jointMaxPositionSpecifiedField = value;
            }
        }
        
        /// <remarks/>
        public double JointMaxTorqueOrForce {
            get {
                return this.jointMaxTorqueOrForceField;
            }
            set {
                this.jointMaxTorqueOrForceField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnore()]
        public virtual bool JointMaxTorqueOrForceSpecified {
            get {
                return this.jointMaxTorqueOrForceSpecifiedField;
            }
            set {
                this.jointMaxTorqueOrForceSpecifiedField = value;
            }
        }
        
        /// <remarks/>
        public double JointMaxVelocity {
            get {
                return this.jointMaxVelocityField;
            }
            set {
                this.jointMaxVelocityField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnore()]
        public virtual bool JointMaxVelocitySpecified {
            get {
                return this.jointMaxVelocitySpecifiedField;
            }
            set {
                this.jointMaxVelocitySpecifiedField = value;
            }
        }
    }
    
    /// <remarks>
///
///        PoseStatusType is derived from DataThingType.
///        An instance of PoseStatusType has the following elements:
///          Name (inherited, optional)
///          Pose
///          Twist (optional)
///          Wrench (optional)
///          Configuration (optional).
///
///        PoseStatusType provides a Cartesian counterpart to
///        JointStatusesType, representing the generalized
///        position/orientation, velocities, and forces.
///        of a reference frame.
///          
///        Configuration provides a robot specific description of the current 
///            configuration flags and turns.
///      
///</remarks>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PoseStatusType : DataThingType {
        
        private PoseType poseField;
        
        private TwistType twistField;
        
        private WrenchType wrenchField;
        
        private string configurationField;
        
        /// <remarks/>
        public PoseType Pose {
            get {
                return this.poseField;
            }
            set {
                this.poseField = value;
            }
        }
        
        /// <remarks/>
        public TwistType Twist {
            get {
                return this.twistField;
            }
            set {
                this.twistField = value;
            }
        }
        
        /// <remarks/>
        public WrenchType Wrench {
            get {
                return this.wrenchField;
            }
            set {
                this.wrenchField = value;
            }
        }
        
        /// <remarks/>
        public string Configuration {
            get {
                return this.configurationField;
            }
            set {
                this.configurationField = value;
            }
        }
    }
    
    /// <remarks>
///
///        PoseType is derived from DataThingType.
///        An instance of PoseType has the following elements:
///          Name (inherited, optional)
///          Point
///          XAxis
///          ZAxis.
/// 
///        The Point locates the origin of a coordinate system. The XAxis and
///        ZAxis give the orientation of the coordinate system. The data for
///        the Point, the ZAxis and the XAxis are expressed relative to another
///        coordinate system.
///      
///</remarks>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PoseType : DataThingType {
        
        private PointType pointField;
        
        private VectorType xAxisField;
        
        private VectorType zAxisField;
        
        /// <remarks/>
        public PointType Point {
            get {
                return this.pointField;
            }
            set {
                this.pointField = value;
            }
        }
        
        /// <remarks/>
        public VectorType XAxis {
            get {
                return this.xAxisField;
            }
            set {
                this.xAxisField = value;
            }
        }
        
        /// <remarks/>
        public VectorType ZAxis {
            get {
                return this.zAxisField;
            }
            set {
                this.zAxisField = value;
            }
        }
    }
    
    /// <remarks>
///
///        PointType is derived from DataThingType.
///        An instance of PointType has the following elements:
///          Name (inherited, optional)
///          X
///          Y
///          Z.
/// 
///        X, Y, and Z are the Cartesian coordinates of the Point.
///      
///</remarks>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PointType : DataThingType {
        
        private double xField;
        
        private double yField;
        
        private double zField;
        
        /// <remarks/>
        public double X {
            get {
                return this.xField;
            }
            set {
                this.xField = value;
            }
        }
        
        /// <remarks/>
        public double Y {
            get {
                return this.yField;
            }
            set {
                this.yField = value;
            }
        }
        
        /// <remarks/>
        public double Z {
            get {
                return this.zField;
            }
            set {
                this.zField = value;
            }
        }
    }
    
    /// <remarks>
///
///        VectorType is derived from DataThingType.
///        An instance of VectorType has the following elements:
///          Name (inherited, optional)
///          I
///          J
///          K.
/// 
///        I, J, and K represent the usual i, j, and k components of a 3D
///        vector.
///      
///</remarks>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class VectorType : DataThingType {
        
        private double iField;
        
        private double jField;
        
        private double kField;
        
        /// <remarks/>
        public double I {
            get {
                return this.iField;
            }
            set {
                this.iField = value;
            }
        }
        
        /// <remarks/>
        public double J {
            get {
                return this.jField;
            }
            set {
                this.jField = value;
            }
        }
        
        /// <remarks/>
        public double K {
            get {
                return this.kField;
            }
            set {
                this.kField = value;
            }
        }
    }
    
    /// <remarks>
///
///        TwistType is derived from DataThingType.
///        An instance of TwistType has the following elements:
///          Name (inherited, optional)
///          LinearVelocity
///          AngularVelocity.
///
///        A TwistType object represents the velocity of a
///        rigid object in SE(3).
///      
///</remarks>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TwistType : DataThingType {
        
        private VectorType linearVelocityField;
        
        private VectorType angularVelocityField;
        
        /// <remarks/>
        public VectorType LinearVelocity {
            get {
                return this.linearVelocityField;
            }
            set {
                this.linearVelocityField = value;
            }
        }
        
        /// <remarks/>
        public VectorType AngularVelocity {
            get {
                return this.angularVelocityField;
            }
            set {
                this.angularVelocityField = value;
            }
        }
    }
    
    /// <remarks>
///
///        WrenchType is derived from DataThingType.
///        An instance of WrenchType has the following elements:
///          Name (inherited, optional)
///          Force
///          Moment.
///
///        A WrenchType object represents generalized forces and torques on a
///        rigid object in SE(3).
///      
///</remarks>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class WrenchType : DataThingType {
        
        private VectorType forceField;
        
        private VectorType momentField;
        
        /// <remarks/>
        public VectorType Force {
            get {
                return this.forceField;
            }
            set {
                this.forceField = value;
            }
        }
        
        /// <remarks/>
        public VectorType Moment {
            get {
                return this.momentField;
            }
            set {
                this.momentField = value;
            }
        }
    }
    
    /// <remarks>
///
///        SettingsStatusType is derived from DataThingType. It provides the values
///        echoed back from the appropriate command to set that parameter. It might
///        also provide the initial default value read from a configuration file or
///        from a lower level controller on startup if no command has yet been 
///        given.
///        
///        An instance of SettingsStatusType has the following elements:
///          Name (inherited, optional)
///          AngleUnitName (optional)
///          EndEffectorParameterSetting (optional)
///          EndEffectorSetting (optional)
///          ForceUnitName (optional)
///          IntermediatePoseTolerance (optional)
///          JointLimits (optional)
///          LengthUnitName (optional)
///          MaxCartesianLimit (optional)
///          MinCartesianLimit (optional)
///          MotionCoordinated (optional)
///          PoseTolerance (optional)
///          RobotParameterSetting (optional)
///          RotAccelAbsolute (optional)
///          RotAccelRelative (optional)
///          RotSpeedAbsolute (optional)
///          RotSpeedRelative (optional)
///          TorqueUnitName (optional)
///          TransAccelAbsolute (optional)
///          TransAccelRelative (optional)
///          TransSpeedAbsolute (optional)
///          TransSpeedRelative (optional).
///
///        AngleUnitName is a string that can be only the literals 'radian' or
///          'degree'. This tells the robot that all further commands
///           giving angle values will implicitly use the named unit.
///        EndEffectorParameterSetting is for setting parameters of end
///           effectors that have parameters. The meaning of the parameter
///           settings is not part of CRCL. It is expected that this command will
///           be used only to send parameter values that can be used by the end
///           effector currently in use.
///        EndEffectorSetting is for setting the effectivity of end effectors.
///           If an end effector has multiple control modes, the control mode
///           must be set using a SetEndEffectorParameters command, so that the
///           meaning of SetEndEffector commands is unambiguous. For end effectors
///           that have a continuously variable setting, the Setting means a 
///           fraction of maximum openness, force, torque, power, etc. For end 
///           effectors that have only two choices (powered or unpowered, open or 
///           closed, on or off), a positive Setting value means powered, open, 
///           or on, while a zero Setting value means unpowered, closed, or off.
///        ForceUnitName is a string that can be only the literals 'newton',
///           'pound', or 'ounce'. This tells the robot that all further commands
///           giving force values will implicitly use the named unit.
///        JointLimits represents a list of different possible limits associated 
///           with each joint. These limits can not be directly set through CRCL.
///        IntermediatePoseTolerance indicates to the robot the precision with
///           which it must reach each intermediate waypoint.
///        LengthUnitName is a string that can be only the literals 'meter',
///           'millimeter', or 'inch'. This tells the robot that all further
///            commands giving position or length values will implicitly use the
///            named unit. 
///        MaxCartesianLimit is the point with greatest X,Y, and Z values that can 
///            be reached without violating a configured cartesian limit. It can no
///            be directly changed through CRCL.
///        MinCartesianLimit is the point with lowest X,Y, and Z values that can 
///            be reached without violating a configured cartesian limit. It can no
///            be directly changed through CRCL.
///        MotionCoordinated is a boolean. If the value is true, rotational and
///            translational motion must finish simultaneously in motion commands
///            (including each segment in a multiple segment motion command),
///            except as possibly temporarily overridden in the the motion
///            command. If the value is false, there is no such requirement.
///        PoseTolerance indicates to the robot the precision with
///           which it must reach its end location.
///        RobotParameterSetting is for setting robot parameters that
///            cannot be set by any other CRCL command. The meaning of the
///            parameter settings is not part of CRCL.
///        RotAccelAbsolute represents the target single axis
///            rotational acceleration for the robot, in current angle units per
///            second per second.
///        RotAccelRelative represents the fraction of the 
///            robot's maximum rotational acceleration that it should use.
///        RotSpeedAbsolute represents the target single axis
///            rotational speed for the robot, in current angle units per
///            second.
///        RotSpeedRelative represents the fraction of the 
///            robot's maximum rotational speed that it should use.
///        TorqueUnitName is a string that can be only the literals 'newtonMeter'
///            or 'footPound'. This tells the robot that all further commands
///            giving torque values will implicitly use the named unit.
///        TransAccelAbsolute represents the translational acceleration for the 
///            controlled point, in current length units per second per second.
///        TransAccelRelative represents the fraction of the 
///            robot's maximum translational acceleration that it should use.
///        TransSpeedAbsolute represents the translational speed for the 
///            controlled point, in current length units per second.
///        TransSpeedRelative represents the fraction of the 
///            robot's maximum translational speed that it should use.
///      
///</remarks>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SettingsStatusType : DataThingType {
        
        private AngleUnitEnumType angleUnitNameField;
        
        private bool angleUnitNameSpecifiedField;
        
        private ParameterSettingType[] endEffectorParameterSettingField;
        
        private double endEffectorSettingField;
        
        private bool endEffectorSettingSpecifiedField;
        
        private ForceUnitEnumType forceUnitNameField;
        
        private bool forceUnitNameSpecifiedField;
        
        private JointLimitType[] jointLimitsField;
        
        private PoseToleranceType intermediatePoseToleranceField;
        
        private LengthUnitEnumType lengthUnitNameField;
        
        private bool lengthUnitNameSpecifiedField;
        
        private PointType maxCartesianLimitField;
        
        private PointType minCartesianLimitField;
        
        private bool motionCoordinatedField;
        
        private bool motionCoordinatedSpecifiedField;
        
        private PoseToleranceType poseToleranceField;
        
        private ParameterSettingType[] robotParameterSettingField;
        
        private RotAccelAbsoluteType rotAccelAbsoluteField;
        
        private RotAccelRelativeType rotAccelRelativeField;
        
        private RotSpeedAbsoluteType rotSpeedAbsoluteField;
        
        private RotSpeedRelativeType rotSpeedRelativeField;
        
        private TorqueUnitEnumType torqueUnitNameField;
        
        private bool torqueUnitNameSpecifiedField;
        
        private TransAccelAbsoluteType transAccelAbsoluteField;
        
        private TransAccelRelativeType transAccelRelativeField;
        
        private TransSpeedAbsoluteType transSpeedAbsoluteField;
        
        private TransSpeedRelativeType transSpeedRelativeField;
        
        /// <remarks/>
        public AngleUnitEnumType AngleUnitName {
            get {
                return this.angleUnitNameField;
            }
            set {
                this.angleUnitNameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnore()]
        public virtual bool AngleUnitNameSpecified {
            get {
                return this.angleUnitNameSpecifiedField;
            }
            set {
                this.angleUnitNameSpecifiedField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("EndEffectorParameterSetting")]
        public ParameterSettingType[] EndEffectorParameterSetting {
            get {
                return this.endEffectorParameterSettingField;
            }
            set {
                this.endEffectorParameterSettingField = value;
            }
        }
        
        /// <remarks/>
        public double EndEffectorSetting {
            get {
                return this.endEffectorSettingField;
            }
            set {
                this.endEffectorSettingField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnore()]
        public virtual bool EndEffectorSettingSpecified {
            get {
                return this.endEffectorSettingSpecifiedField;
            }
            set {
                this.endEffectorSettingSpecifiedField = value;
            }
        }
        
        /// <remarks/>
        public ForceUnitEnumType ForceUnitName {
            get {
                return this.forceUnitNameField;
            }
            set {
                this.forceUnitNameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnore()]
        public virtual bool ForceUnitNameSpecified {
            get {
                return this.forceUnitNameSpecifiedField;
            }
            set {
                this.forceUnitNameSpecifiedField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("JointLimits")]
        public JointLimitType[] JointLimits {
            get {
                return this.jointLimitsField;
            }
            set {
                this.jointLimitsField = value;
            }
        }
        
        /// <remarks/>
        public PoseToleranceType IntermediatePoseTolerance {
            get {
                return this.intermediatePoseToleranceField;
            }
            set {
                this.intermediatePoseToleranceField = value;
            }
        }
        
        /// <remarks/>
        public LengthUnitEnumType LengthUnitName {
            get {
                return this.lengthUnitNameField;
            }
            set {
                this.lengthUnitNameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnore()]
        public virtual bool LengthUnitNameSpecified {
            get {
                return this.lengthUnitNameSpecifiedField;
            }
            set {
                this.lengthUnitNameSpecifiedField = value;
            }
        }
        
        /// <remarks/>
        public PointType MaxCartesianLimit {
            get {
                return this.maxCartesianLimitField;
            }
            set {
                this.maxCartesianLimitField = value;
            }
        }
        
        /// <remarks/>
        public PointType MinCartesianLimit {
            get {
                return this.minCartesianLimitField;
            }
            set {
                this.minCartesianLimitField = value;
            }
        }
        
        /// <remarks/>
        public bool MotionCoordinated {
            get {
                return this.motionCoordinatedField;
            }
            set {
                this.motionCoordinatedField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnore()]
        public virtual bool MotionCoordinatedSpecified {
            get {
                return this.motionCoordinatedSpecifiedField;
            }
            set {
                this.motionCoordinatedSpecifiedField = value;
            }
        }
        
        /// <remarks/>
        public PoseToleranceType PoseTolerance {
            get {
                return this.poseToleranceField;
            }
            set {
                this.poseToleranceField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("RobotParameterSetting")]
        public ParameterSettingType[] RobotParameterSetting {
            get {
                return this.robotParameterSettingField;
            }
            set {
                this.robotParameterSettingField = value;
            }
        }
        
        /// <remarks/>
        public RotAccelAbsoluteType RotAccelAbsolute {
            get {
                return this.rotAccelAbsoluteField;
            }
            set {
                this.rotAccelAbsoluteField = value;
            }
        }
        
        /// <remarks/>
        public RotAccelRelativeType RotAccelRelative {
            get {
                return this.rotAccelRelativeField;
            }
            set {
                this.rotAccelRelativeField = value;
            }
        }
        
        /// <remarks/>
        public RotSpeedAbsoluteType RotSpeedAbsolute {
            get {
                return this.rotSpeedAbsoluteField;
            }
            set {
                this.rotSpeedAbsoluteField = value;
            }
        }
        
        /// <remarks/>
        public RotSpeedRelativeType RotSpeedRelative {
            get {
                return this.rotSpeedRelativeField;
            }
            set {
                this.rotSpeedRelativeField = value;
            }
        }
        
        /// <remarks/>
        public TorqueUnitEnumType TorqueUnitName {
            get {
                return this.torqueUnitNameField;
            }
            set {
                this.torqueUnitNameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnore()]
        public virtual bool TorqueUnitNameSpecified {
            get {
                return this.torqueUnitNameSpecifiedField;
            }
            set {
                this.torqueUnitNameSpecifiedField = value;
            }
        }
        
        /// <remarks/>
        public TransAccelAbsoluteType TransAccelAbsolute {
            get {
                return this.transAccelAbsoluteField;
            }
            set {
                this.transAccelAbsoluteField = value;
            }
        }
        
        /// <remarks/>
        public TransAccelRelativeType TransAccelRelative {
            get {
                return this.transAccelRelativeField;
            }
            set {
                this.transAccelRelativeField = value;
            }
        }
        
        /// <remarks/>
        public TransSpeedAbsoluteType TransSpeedAbsolute {
            get {
                return this.transSpeedAbsoluteField;
            }
            set {
                this.transSpeedAbsoluteField = value;
            }
        }
        
        /// <remarks/>
        public TransSpeedRelativeType TransSpeedRelative {
            get {
                return this.transSpeedRelativeField;
            }
            set {
                this.transSpeedRelativeField = value;
            }
        }
    }
    
    /// <remarks>
///
///        AngleUnitEnumType enumerates angle units. This might be used,
///        for example, in a command that sets angle units.
///      
///</remarks>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
    [System.SerializableAttribute()]
    public enum AngleUnitEnumType {
        
        /// <remarks/>
        degree,
        
        /// <remarks/>
        radian,
    }
    
    /// <remarks>
///
///        ParameterSettingType is derived from DataThingType. 
///        An instance of ParameterSettingType has the following elements:
///          Name (inherited, optional)
///          ParameterName
///          ParameterValue.
///
///        ParameterSettingType is used to set values of parameters. The
///        ParameterName and ParameterValue are both strings. The
///        ParameterValue string may represent a data type known to the
///        receiving system.
///      
///</remarks>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ParameterSettingType : DataThingType {
        
        private string parameterNameField;
        
        private string parameterValueField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(DataType="token")]
        public string ParameterName {
            get {
                return this.parameterNameField;
            }
            set {
                this.parameterNameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(DataType="token")]
        public string ParameterValue {
            get {
                return this.parameterValueField;
            }
            set {
                this.parameterValueField = value;
            }
        }
    }
    
    /// <remarks>
///
///        ForceUnitEnumType enumerates force units. This might be used,
///        for example, in a command that sets force units.
///      
///</remarks>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
    [System.SerializableAttribute()]
    public enum ForceUnitEnumType {
        
        /// <remarks/>
        newton,
        
        /// <remarks/>
        pound,
        
        /// <remarks/>
        ounce,
    }
    
    /// <remarks>
///
///        PoseToleranceType is derived from DataThingType. 
///        An instance of PoseToleranceType has the following elements:
///          Name (inherited, optional)
///          XPointTolerance (optional)
///          YPointTolerance (optional)
///          ZPointTolerance (optional)
///          XAxisTolerance (optional)
///          ZAxisTolerance (optional).
///
///        The XPointTolerance is the distance along the XAxis in current
///        length units within which the controlled point must come from the X
///        value of the point given in the pose with which the pose tolerance
///        is associated. The YPointTolerance and ZPointTolerance are similar.
///        The XAxisTolerance is the angle in current angle units within which
///        the XAxis must come from the given XAxis. The ZAxisTolerance is
///        similar. All five tolerances must be satisfied at the same instant.
///      
///</remarks>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PoseToleranceType : DataThingType {
        
        private double xPointToleranceField;
        
        private bool xPointToleranceSpecifiedField;
        
        private double yPointToleranceField;
        
        private bool yPointToleranceSpecifiedField;
        
        private double zPointToleranceField;
        
        private bool zPointToleranceSpecifiedField;
        
        private double xAxisToleranceField;
        
        private bool xAxisToleranceSpecifiedField;
        
        private double zAxisToleranceField;
        
        private bool zAxisToleranceSpecifiedField;
        
        /// <remarks/>
        public double XPointTolerance {
            get {
                return this.xPointToleranceField;
            }
            set {
                this.xPointToleranceField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnore()]
        public virtual bool XPointToleranceSpecified {
            get {
                return this.xPointToleranceSpecifiedField;
            }
            set {
                this.xPointToleranceSpecifiedField = value;
            }
        }
        
        /// <remarks/>
        public double YPointTolerance {
            get {
                return this.yPointToleranceField;
            }
            set {
                this.yPointToleranceField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnore()]
        public virtual bool YPointToleranceSpecified {
            get {
                return this.yPointToleranceSpecifiedField;
            }
            set {
                this.yPointToleranceSpecifiedField = value;
            }
        }
        
        /// <remarks/>
        public double ZPointTolerance {
            get {
                return this.zPointToleranceField;
            }
            set {
                this.zPointToleranceField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnore()]
        public virtual bool ZPointToleranceSpecified {
            get {
                return this.zPointToleranceSpecifiedField;
            }
            set {
                this.zPointToleranceSpecifiedField = value;
            }
        }
        
        /// <remarks/>
        public double XAxisTolerance {
            get {
                return this.xAxisToleranceField;
            }
            set {
                this.xAxisToleranceField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnore()]
        public virtual bool XAxisToleranceSpecified {
            get {
                return this.xAxisToleranceSpecifiedField;
            }
            set {
                this.xAxisToleranceSpecifiedField = value;
            }
        }
        
        /// <remarks/>
        public double ZAxisTolerance {
            get {
                return this.zAxisToleranceField;
            }
            set {
                this.zAxisToleranceField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnore()]
        public virtual bool ZAxisToleranceSpecified {
            get {
                return this.zAxisToleranceSpecifiedField;
            }
            set {
                this.zAxisToleranceSpecifiedField = value;
            }
        }
    }
    
    /// <remarks>
///
///        LengthUnitEnumType enumerates length units. This might be used,
///        for example, in a command that sets length units.
///      
///</remarks>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
    [System.SerializableAttribute()]
    public enum LengthUnitEnumType {
        
        /// <remarks/>
        meter,
        
        /// <remarks/>
        millimeter,
        
        /// <remarks/>
        inch,
    }
    
    /// <remarks>
///
///        RotAccelAbsoluteType is derived from RotAccelType.
///        An instance of RotAccelAbsoluteType has the following elements:
///          Name (inherited, optional)
///          Setting.
///
///        Setting is a real number that represents the target single axis
///        rotational acceleration for the robot, in current angle units per
///        second per second.
///      
///</remarks>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RotAccelAbsoluteType : RotAccelType {
        
        private double settingField;
        
        /// <remarks/>
        public double Setting {
            get {
                return this.settingField;
            }
            set {
                this.settingField = value;
            }
        }
    }
    
    /// <remarks>
///
///        The abstract RotAccelType is derived from DataThingType.
///        An instance of RotAccelType has the following
///        elements:
///          Name (inherited, optional)
///          .
///
///        RotAccelType is an abstract type used as the parent type of:
///          RotAccelAbsoluteType
///          RotAccelRelativeType.
///      
///</remarks>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(RotAccelAbsoluteType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(RotAccelRelativeType))]
    public partial class RotAccelType : DataThingType {
    }
    
    /// <remarks>
///
///        RotAccelRelativeType is derived from RotAccelType.
///        An instance of RotAccelRelativeType has the following elements:
///          Name (inherited, optional)
///          Fraction.
///
///        Fraction is a real number that represents the fraction of the
///        robot's maximum rotational acceleration that it should use.
///      
///</remarks>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RotAccelRelativeType : RotAccelType {
        
        private double fractionField;
        
        /// <remarks/>
        public double Fraction {
            get {
                return this.fractionField;
            }
            set {
                this.fractionField = value;
            }
        }
    }
    
    /// <remarks>
///
///        RotSpeedAbsoluteType is derived from RotSpeedType.
///        An instance of RotSpeedAbsoluteType has the following
///        elements:
///          Name (inherited, optional)
///          Setting.
///
///        Setting is a real number that represents the target single axis
///        rotational speed for the robot, in current angle units per second.
///      
///</remarks>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RotSpeedAbsoluteType : RotSpeedType {
        
        private double settingField1;
        
        /// <remarks/>
        public double Setting {
            get {
                return this.settingField1;
            }
            set {
                this.settingField1 = value;
            }
        }
    }
    
    /// <remarks>
///
///        The abstract RotSpeedType is derived from DataThingType.
///        An instance of RotSpeedType has the following
///        elements:
///          Name (inherited, optional)
///          .
///
///        RotSpeedType is an abstract type used as the parent type of: 
///          RotSpeedAbsoluteType
///          RotSpeedRelativeType.
///      
///</remarks>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(RotSpeedAbsoluteType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(RotSpeedRelativeType))]
    public partial class RotSpeedType : DataThingType {
    }
    
    /// <remarks>
///
///        RotSpeedRelativeType is derived from RotSpeedType.
///        An instance of RotSpeedRelativeType has the following elements:
///          Name (inherited, optional)
///          Fraction.
///
///        Fraction is a real number that represents the fraction of the
///        robot's maximum rotational speed that it should use.
///      
///</remarks>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RotSpeedRelativeType : RotSpeedType {
        
        private double fractionField1;
        
        /// <remarks/>
        public double Fraction {
            get {
                return this.fractionField1;
            }
            set {
                this.fractionField1 = value;
            }
        }
    }
    
    /// <remarks>
///
///        TorqueUnitEnumType enumerates torque units. This might be used,
///        for example in a command that sets torque units.
///      
///</remarks>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
    [System.SerializableAttribute()]
    public enum TorqueUnitEnumType {
        
        /// <remarks/>
        newtonMeter,
        
        /// <remarks/>
        footPound,
    }
    
    /// <remarks>
///
///        TransAccelAbsoluteType is derived from TransAccelType.
///        An instance of TransAccelAbsoluteType has the following
///        elements:
///          Name (inherited, optional)
///          Setting.
///
///        Setting is a real number that represents the target
///        translational acceleration for the controlled point, in
///        current length units per second per second.
///      
///</remarks>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TransAccelAbsoluteType : TransAccelType {
        
        private double settingField2;
        
        /// <remarks/>
        public double Setting {
            get {
                return this.settingField2;
            }
            set {
                this.settingField2 = value;
            }
        }
    }
    
    /// <remarks>
///
///        The abstract TransAccelType is derived from DataThingType.
///        An instance of TransAccelType has the following elements:
///          Name (inherited, optional)
///          .
///
///        TransAccelType is an abstract type used as the parent type of: 
///          TransAccelAbsoluteType
///          TransAccelRelativeType.
///      
///</remarks>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(TransAccelAbsoluteType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(TransAccelRelativeType))]
    public partial class TransAccelType : DataThingType {
    }
    
    /// <remarks>
///
///        TransAccelRelativeType is derived from TransAccelType.
///        An instance of TransAccelRelativeType has the following
///        elements:
///          Name (inherited, optional)
///          Fraction.
///        
///        Fraction is a real number that represents the fraction of the
///        robot's maximum translational acceleration that it should use.
///      
///</remarks>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TransAccelRelativeType : TransAccelType {
        
        private double fractionField2;
        
        /// <remarks/>
        public double Fraction {
            get {
                return this.fractionField2;
            }
            set {
                this.fractionField2 = value;
            }
        }
    }
    
    /// <remarks>
///
///        TransSpeedAbsoluteType is derived from TransSpeedType.
///        An instance of TransSpeedAbsoluteType has the following
///        elements:
///          Name (inherited, optional)
///          Setting.
///
///        Setting is a real number that represents the target speed for the
///        controlled point, in current length units per second.
///      
///</remarks>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TransSpeedAbsoluteType : TransSpeedType {
        
        private double settingField3;
        
        /// <remarks/>
        public double Setting {
            get {
                return this.settingField3;
            }
            set {
                this.settingField3 = value;
            }
        }
    }
    
    /// <remarks>
///
///        The abstract TransSpeedType is derived from DataThingType.
///        An instance of TransSpeedType has the following
///        elements:
///          Name (inherited, optional)
///          .
///
///        TransSpeedType is an abstract type used as the parent type of: 
///          TransSpeedAbsoluteType
///          TransSpeedRelativeType.
///      
///</remarks>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(TransSpeedAbsoluteType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(TransSpeedRelativeType))]
    public partial class TransSpeedType : DataThingType {
    }
    
    /// <remarks>
///
///        TransSpeedRelativeType is derived from TransSpeedType.
///        An instance of TransSpeedRelativeType has the following elements:
///          Name (inherited, optional)
///          Fraction.
///
///        Fraction is a real number that represents the fraction of the
///        robot's maximum translational speed that it should use.
///      
///</remarks>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TransSpeedRelativeType : TransSpeedType {
        
        private double fractionField3;
        
        /// <remarks/>
        public double Fraction {
            get {
                return this.fractionField3;
            }
            set {
                this.fractionField3 = value;
            }
        }
    }
}
