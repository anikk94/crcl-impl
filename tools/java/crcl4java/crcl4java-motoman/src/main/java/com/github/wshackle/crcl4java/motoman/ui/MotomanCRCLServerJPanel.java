/*
 * This software is public domain software, however it is preferred
 * that the following disclaimers be attached.
 * Software Copywrite/Warranty Disclaimer
 * 
 * This software was developed at the National Institute of Standards and
 * Technology by employees of the Federal Government in the course of their
 * official duties. Pursuant to title 17 Section 105 of the United States
 * Code this software is not subject to copyright protection and is in the
 * public domain.
 * 
 * This software is experimental. NIST assumes no responsibility whatsoever 
 * for its use by other parties, and makes no guarantees, expressed or 
 * implied, about its quality, reliability, or any other characteristic. 
 * We would appreciate acknowledgement if the software is used. 
 * This software can be redistributed and/or modified freely provided 
 * that any derivative works bear some notice that they are derived from it, 
 * and any modified versions bear some notice that they have been modified.
 * 
 *  See http://www.copyright.gov/title17/92chap1.html#105
 * 
 */
package com.github.wshackle.crcl4java.motoman.ui;

import java.awt.Container;
import java.awt.HeadlessException;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.lang.reflect.Array;
import java.lang.reflect.Constructor;
import java.lang.reflect.Method;
import java.lang.reflect.Modifier;
import java.net.ConnectException;
import java.net.InetSocketAddress;
import java.net.Socket;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Properties;
import java.util.TreeMap;
import java.util.function.Consumer;
import java.util.logging.Level;
import java.util.logging.Logger;

import javax.swing.JFrame;
import javax.swing.JOptionPane;

import org.checkerframework.checker.nullness.qual.Nullable;

import com.github.wshackle.crcl4java.motoman.MotoPlusConnection;
import com.github.wshackle.crcl4java.motoman.MotomanCRCLServer;
import com.github.wshackle.crcl4java.motoman.MpcStatus;

import crcl.base.CRCLStatusType;
import crcl.base.CommandStateEnumType;
import crcl.ui.misc.MultiLineStringJPanel;
import crcl.ui.misc.NotificationsJPanel;
import crcl.ui.misc.ObjTableJPanel;
import crcl.ui.server.SimServerJPanel;
import crcl.utils.CRCLSocket;
import crcl.utils.PropertiesUtils;
import crcl.utils.XFuture;
import crcl.utils.server.CRCLServerSocket;
import crcl.utils.server.GuardHistoryElement;

/**
 *
 * @author Will Shackleford {@literal <william.shackleford@nist.gov>}
 */
@SuppressWarnings("serial")
public class MotomanCRCLServerJPanel extends javax.swing.JPanel {

    /**
     * Creates new form MotomanCrclServerJPanel
     */
    @SuppressWarnings({"nullness", "initialization"})
    public MotomanCRCLServerJPanel() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated
	// Code">//GEN-BEGIN:initComponents
	private void initComponents() {

		jTabbedPane1 = new javax.swing.JTabbedPane();
		jPanelTelnet = new javax.swing.JPanel();
		telnetJPanel1 = new com.github.wshackle.crcl4java.motoman.ui.TelnetJPanel();
		jPanelMotoPlusCrclCommunications = new javax.swing.JPanel();
		jLabel1 = new javax.swing.JLabel();
		jTextFieldCrclPort = new javax.swing.JTextField();
		jLabel2 = new javax.swing.JLabel();
		jTextFieldMotoplusHost = new javax.swing.JTextField();
		jCheckBoxConnect = new javax.swing.JCheckBox();
		jLabel3 = new javax.swing.JLabel();
		jTextFieldMotoplusPort = new javax.swing.JTextField();
		jCheckBoxDebug = new javax.swing.JCheckBox();
		jScrollPane1 = new javax.swing.JScrollPane();
		jTextAreaErrLog = new javax.swing.JTextArea();
		jButtonSendRequest = new javax.swing.JButton();
		jCheckBox1 = new javax.swing.JCheckBox();
		jButtonStatus = new javax.swing.JButton();
		jButtonMpcStatusOnly = new javax.swing.JButton();
		jLabelPerfInfo = new javax.swing.JLabel();
		jButtonUpdatePerfInfo = new javax.swing.JButton();
		jLabel4 = new javax.swing.JLabel();
		jTextFieldStatCacheTime = new javax.swing.JTextField();
		jLabel5 = new javax.swing.JLabel();
		jTextFieldConnectTimeout = new javax.swing.JTextField();
		jLabel6 = new javax.swing.JLabel();
		jTextFieldReadTimeout = new javax.swing.JTextField();
		jButtonPlotGaurdValues = new javax.swing.JButton();
		jButtonStatusCheckInfo = new javax.swing.JButton();

		jPanelTelnet.setBorder(javax.swing.BorderFactory.createTitledBorder("Telnet"));

		javax.swing.GroupLayout jPanelTelnetLayout = new javax.swing.GroupLayout(jPanelTelnet);
		jPanelTelnet.setLayout(jPanelTelnetLayout);
		jPanelTelnetLayout
				.setHorizontalGroup(jPanelTelnetLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
						.addGroup(jPanelTelnetLayout.createSequentialGroup().addContainerGap()
								.addComponent(telnetJPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 715, Short.MAX_VALUE)
								.addContainerGap()));
		jPanelTelnetLayout.setVerticalGroup(
				jPanelTelnetLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(
						jPanelTelnetLayout.createSequentialGroup().addContainerGap().addComponent(telnetJPanel1,
								javax.swing.GroupLayout.DEFAULT_SIZE, 435, Short.MAX_VALUE)));

		jTabbedPane1.addTab("Telnet FS100 Debugging", jPanelTelnet);

		jLabel1.setText("CRCL Port:");

		jTextFieldCrclPort.setText("64444");

		jLabel2.setText("Motoman Motoplus TCP Host:");

		jTextFieldMotoplusHost.setText(MotoPlusConnection.getDefaultHost());

		jCheckBoxConnect.setText("Connected");
		jCheckBoxConnect.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jCheckBoxConnectActionPerformed(evt);
			}
		});

		jLabel3.setText("Port:");

		jTextFieldMotoplusPort.setText("12222  ");

		jCheckBoxDebug.setText("Debug");
		jCheckBoxDebug.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jCheckBoxDebugActionPerformed(evt);
			}
		});

		jTextAreaErrLog.setColumns(20);
		jTextAreaErrLog.setRows(5);
		jScrollPane1.setViewportView(jTextAreaErrLog);

		jButtonSendRequest.setText("Send Request");
		jButtonSendRequest.setEnabled(false);
		jButtonSendRequest.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jButtonSendRequestActionPerformed(evt);
			}
		});

		jCheckBox1.setText("Networked ATI Force Sensor");

		jButtonStatus.setText("Status");
		jButtonStatus.setEnabled(false);
		jButtonStatus.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jButtonStatusActionPerformed(evt);
			}
		});

		jButtonMpcStatusOnly.setText("Test Status Read Speed");
		jButtonMpcStatusOnly.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jButtonMpcStatusOnlyActionPerformed(evt);
			}
		});

		jLabelPerfInfo.setText("--------------------------------------------------------");

		jButtonUpdatePerfInfo.setText("Update Perf Info");
		jButtonUpdatePerfInfo.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jButtonUpdatePerfInfoActionPerformed(evt);
			}
		});

		jLabel4.setText("Stat Cache Time");

		jTextFieldStatCacheTime.setText("50");
		jTextFieldStatCacheTime.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jTextFieldStatCacheTimeActionPerformed(evt);
			}
		});

		jLabel5.setText("Connect Timeout(ms):");

		jTextFieldConnectTimeout.setText("2000 ");
		jTextFieldConnectTimeout.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jTextFieldConnectTimeoutActionPerformed(evt);
			}
		});

		jLabel6.setText("Read Timeout(ms): ");

		jTextFieldReadTimeout.setText("2000 ");
		jTextFieldReadTimeout.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jTextFieldReadTimeoutActionPerformed(evt);
			}
		});

		jButtonPlotGaurdValues.setText("Plot Guard Values");
		jButtonPlotGaurdValues.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jButtonPlotGaurdValuesActionPerformed(evt);
			}
		});

		jButtonStatusCheckInfo.setText("Status Check");
		jButtonStatusCheckInfo.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jButtonStatusCheckInfoActionPerformed(evt);
			}
		});

		javax.swing.GroupLayout jPanelMotoPlusCrclCommunicationsLayout = new javax.swing.GroupLayout(
				jPanelMotoPlusCrclCommunications);
		jPanelMotoPlusCrclCommunications.setLayout(jPanelMotoPlusCrclCommunicationsLayout);
		jPanelMotoPlusCrclCommunicationsLayout.setHorizontalGroup(jPanelMotoPlusCrclCommunicationsLayout
				.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(jPanelMotoPlusCrclCommunicationsLayout.createSequentialGroup()
						.addGroup(jPanelMotoPlusCrclCommunicationsLayout
								.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
								.addGroup(jPanelMotoPlusCrclCommunicationsLayout.createSequentialGroup()
										.addContainerGap()
										.addGroup(jPanelMotoPlusCrclCommunicationsLayout
												.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
												.addGroup(jPanelMotoPlusCrclCommunicationsLayout.createSequentialGroup()
														.addComponent(jCheckBox1)
														.addPreferredGap(
																javax.swing.LayoutStyle.ComponentPlacement.RELATED)
														.addComponent(jLabel5)
														.addPreferredGap(
																javax.swing.LayoutStyle.ComponentPlacement.RELATED)
														.addComponent(jTextFieldConnectTimeout,
																javax.swing.GroupLayout.PREFERRED_SIZE, 50,
																javax.swing.GroupLayout.PREFERRED_SIZE)
														.addPreferredGap(
																javax.swing.LayoutStyle.ComponentPlacement.RELATED)
														.addComponent(jLabel6).addGap(43, 43, 43)
														.addComponent(jTextFieldReadTimeout,
																javax.swing.GroupLayout.PREFERRED_SIZE, 67,
																javax.swing.GroupLayout.PREFERRED_SIZE)
														.addPreferredGap(
																javax.swing.LayoutStyle.ComponentPlacement.RELATED)
														.addComponent(jButtonPlotGaurdValues)
														.addGap(0, 0, Short.MAX_VALUE))
												.addGroup(jPanelMotoPlusCrclCommunicationsLayout.createSequentialGroup()
														.addGroup(jPanelMotoPlusCrclCommunicationsLayout
																.createParallelGroup(
																		javax.swing.GroupLayout.Alignment.LEADING)
																.addComponent(jLabel1).addComponent(jLabel2))
														.addGroup(jPanelMotoPlusCrclCommunicationsLayout
																.createParallelGroup(
																		javax.swing.GroupLayout.Alignment.LEADING)
																.addGroup(jPanelMotoPlusCrclCommunicationsLayout
																		.createSequentialGroup().addGap(20, 20, 20)
																		.addComponent(jTextFieldCrclPort,
																				javax.swing.GroupLayout.PREFERRED_SIZE,
																				javax.swing.GroupLayout.DEFAULT_SIZE,
																				javax.swing.GroupLayout.PREFERRED_SIZE)
																		.addPreferredGap(
																				javax.swing.LayoutStyle.ComponentPlacement.RELATED)
																		.addComponent(jCheckBoxConnect)
																		.addPreferredGap(
																				javax.swing.LayoutStyle.ComponentPlacement.RELATED)
																		.addComponent(jButtonStatus)
																		.addPreferredGap(
																				javax.swing.LayoutStyle.ComponentPlacement.RELATED)
																		.addComponent(jButtonMpcStatusOnly)
																		.addGap(0, 0, Short.MAX_VALUE))
																.addGroup(jPanelMotoPlusCrclCommunicationsLayout
																		.createSequentialGroup().addGap(18, 18, 18)
																		.addComponent(jTextFieldMotoplusHost,
																				javax.swing.GroupLayout.PREFERRED_SIZE,
																				101,
																				javax.swing.GroupLayout.PREFERRED_SIZE)
																		.addPreferredGap(
																				javax.swing.LayoutStyle.ComponentPlacement.RELATED)
																		.addComponent(jLabel3)
																		.addPreferredGap(
																				javax.swing.LayoutStyle.ComponentPlacement.RELATED)
																		.addComponent(jTextFieldMotoplusPort,
																				javax.swing.GroupLayout.PREFERRED_SIZE,
																				javax.swing.GroupLayout.DEFAULT_SIZE,
																				javax.swing.GroupLayout.PREFERRED_SIZE)
																		.addPreferredGap(
																				javax.swing.LayoutStyle.ComponentPlacement.RELATED)
																		.addComponent(jButtonSendRequest)
																		.addPreferredGap(
																				javax.swing.LayoutStyle.ComponentPlacement.RELATED)
																		.addComponent(jLabel4)
																		.addPreferredGap(
																				javax.swing.LayoutStyle.ComponentPlacement.RELATED)
																		.addComponent(jTextFieldStatCacheTime))))))
								.addGroup(jPanelMotoPlusCrclCommunicationsLayout.createSequentialGroup()
										.addComponent(jCheckBoxDebug)
										.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
										.addComponent(jButtonStatusCheckInfo)
										.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED,
												javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
										.addComponent(jButtonUpdatePerfInfo)
										.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
										.addComponent(jLabelPerfInfo, javax.swing.GroupLayout.PREFERRED_SIZE, 460,
												javax.swing.GroupLayout.PREFERRED_SIZE))
								.addComponent(jScrollPane1))
						.addContainerGap()));
		jPanelMotoPlusCrclCommunicationsLayout.setVerticalGroup(jPanelMotoPlusCrclCommunicationsLayout
				.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(jPanelMotoPlusCrclCommunicationsLayout.createSequentialGroup()
						.addGroup(jPanelMotoPlusCrclCommunicationsLayout
								.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE).addComponent(jLabel1)
								.addComponent(jTextFieldCrclPort, javax.swing.GroupLayout.PREFERRED_SIZE,
										javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
								.addComponent(jCheckBoxConnect).addComponent(jButtonStatus)
								.addComponent(jButtonMpcStatusOnly))
						.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
						.addGroup(jPanelMotoPlusCrclCommunicationsLayout
								.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
								.addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING)
								.addGroup(jPanelMotoPlusCrclCommunicationsLayout
										.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
										.addComponent(jLabel2)
										.addComponent(jTextFieldMotoplusHost, javax.swing.GroupLayout.PREFERRED_SIZE,
												javax.swing.GroupLayout.DEFAULT_SIZE,
												javax.swing.GroupLayout.PREFERRED_SIZE)
										.addComponent(jButtonSendRequest)
										.addComponent(jTextFieldMotoplusPort, javax.swing.GroupLayout.PREFERRED_SIZE,
												javax.swing.GroupLayout.DEFAULT_SIZE,
												javax.swing.GroupLayout.PREFERRED_SIZE)
										.addComponent(jLabel4).addComponent(jTextFieldStatCacheTime,
												javax.swing.GroupLayout.PREFERRED_SIZE,
												javax.swing.GroupLayout.DEFAULT_SIZE,
												javax.swing.GroupLayout.PREFERRED_SIZE)))
						.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
						.addGroup(jPanelMotoPlusCrclCommunicationsLayout
								.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
								.addComponent(jCheckBox1).addComponent(jLabel5)
								.addComponent(jTextFieldConnectTimeout, javax.swing.GroupLayout.PREFERRED_SIZE,
										javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
								.addComponent(jLabel6)
								.addComponent(jTextFieldReadTimeout, javax.swing.GroupLayout.PREFERRED_SIZE,
										javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
								.addComponent(jButtonPlotGaurdValues, javax.swing.GroupLayout.PREFERRED_SIZE, 40,
										javax.swing.GroupLayout.PREFERRED_SIZE))
						.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
						.addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 325, Short.MAX_VALUE)
						.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
						.addGroup(jPanelMotoPlusCrclCommunicationsLayout
								.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
								.addComponent(jCheckBoxDebug).addComponent(jLabelPerfInfo)
								.addComponent(jButtonUpdatePerfInfo).addComponent(jButtonStatusCheckInfo))
						.addContainerGap()));

		jTabbedPane1.addTab("MotoPlus / CRCL Communications", jPanelMotoPlusCrclCommunications);

		javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
		this.setLayout(layout);
		layout.setHorizontalGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(
				layout.createSequentialGroup().addContainerGap().addComponent(jTabbedPane1).addContainerGap()));
		layout.setVerticalGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(
				layout.createSequentialGroup().addContainerGap().addComponent(jTabbedPane1).addContainerGap()));
	}// </editor-fold>//GEN-END:initComponents

    private @Nullable MotomanCRCLServer motomanCrclServer = null;
    private int motomanPort = MotomanCRCLServer.DEFAULT_MOTOMAN_PORT;
    private int crclPort = CRCLSocket.DEFAULT_PORT;
    private String motomanHost = MotomanCRCLServer.DEFAULT_MOTOMAN_HOST;
    private @Nullable Thread crclThread = null;

    private int connectTimeoutMillis = 2000;
    private int readTimeoutMillis = 2000;

    public int getReadTimeoutMillis() {
        return readTimeoutMillis;
    }

    public void setReadTimeoutMillis(int readTimeoutMillis) {
        this.readTimeoutMillis = readTimeoutMillis;
    }

    public String getMotomanHost() {
        return motomanHost;
    }

    public void setMotomanHost(String motomanHost) {
        this.motomanHost = motomanHost;
    }

    /**
     * Get the value of connectTimeoutMillis
     *
     * @return the value of connectTimeoutMillis
     */
    public int getConnectTimeoutMillis() {
        return connectTimeoutMillis;
    }

    /**
     * Set the value of connectTimeoutMillis
     *
     * @param connectTimeoutMillis new value of connectTimeoutMillis
     */
    public void setConnectTimeoutMillis(int connectTimeoutMillis) {
        this.connectTimeoutMillis = connectTimeoutMillis;
    }

    private Socket createSocketWithTimeout(String host, int port, int connectTimeout, int readTimeout)
            throws IOException {
        try {
            Socket socket = new Socket();
            if (readTimeout > 0) {
                socket.setSoTimeout(readTimeout);
            }
            InetSocketAddress inetSocketAddress = new InetSocketAddress(host, port);
            logPrintln("inetSocketAddress = " + inetSocketAddress + ", timoutMillis=" + connectTimeout);
            socket.connect(inetSocketAddress, connectTimeout);
            logPrintln("socket.connect() done.");
            return socket;
        } catch (IOException iOException) {
            throw new IOException("host=" + host + ",port=" + port + ",connectTimeout=" + connectTimeout
                    + ",readTimeout=" + readTimeout, iOException);
        }
    }

    public boolean isCrclMotoplusConnected() {
        return jCheckBoxConnect.isSelected() && null != crclThread && crclThread.isAlive() && null != motomanCrclServer
                && motomanCrclServer.mpcConnected();
    }

    private final int LOG_SIZE_LIMIT = 50000;

    private void appendLog(@Nullable String s) {
        if (s == null) {
            return;
        }
        jTextAreaErrLog.append(s + '\n');
        String fullString = jTextAreaErrLog.getText();
        if (fullString.length() > LOG_SIZE_LIMIT) {
            int index = fullString.indexOf('\n', 1);
            while (fullString.length() > (LOG_SIZE_LIMIT - 240) && index > 0) {
                fullString = fullString.substring(index);
                index = fullString.indexOf('\n', 1);
            }
            jTextAreaErrLog.setText(fullString.substring(index));
        }
    }

    private void logPrintln(String s) {
        System.out.println(s);
        appendLog(s);
    }

    private void errLogPrintln(String s) {
        System.err.println(s);
        appendLog(s);
    }

    @SuppressWarnings({"nullness", "initialization"})
    private final Consumer<String> logConsumer = this::appendLog;

    public void connectCrclMotoplus() throws IOException {
        internalDisconnect();
        motomanCrclServer = new MotomanCRCLServer(
                new CRCLServerSocket<>(crclPort, MotomanCRCLServer.MOTOMAN_STATE_GENERATOR),
                () -> MotoPlusConnection.connectionFromSocket(
                        createSocketWithTimeout(motomanHost, motomanPort, connectTimeoutMillis, readTimeoutMillis)));
        motomanCrclServer.setDebug(jCheckBoxDebug.isSelected());
        motomanCrclServer.addLogListener(logConsumer);
        motomanCrclServer.start();
        if (!jCheckBoxConnect.isSelected()) {
            jCheckBoxConnect.setSelected(true);
        }
        enableMotomanCrclServerControls();
    }

    private void enableMotomanCrclServerControls() {
        if (null == motomanCrclServer) {
            throw new IllegalStateException("motomanCrclServer=" + motomanCrclServer);
        }
        jButtonSendRequest.setEnabled(true);
        jButtonStatus.setEnabled(true);
    }

    private void disableMotomanCrclServerControls() {
        if (null != motomanCrclServer) {
            throw new IllegalStateException("motomanCrclServer=" + motomanCrclServer);
        }
        jButtonSendRequest.setEnabled(false);
        jButtonStatus.setEnabled(false);
    }

    public void disconnectCrclMotoplus() {
        if (jCheckBoxConnect.isSelected()) {
            jCheckBoxConnect.setSelected(false);
        }
        internalDisconnect();
        disableMotomanCrclServerControls();
    }

    private void internalDisconnect() {
        if (null != motomanCrclServer) {
            motomanCrclServer.removeLogListener(logConsumer);
            try {
                motomanCrclServer.close();
            } catch (Exception ex) {
                LOGGER.log(Level.SEVERE, "", ex);
            }
            motomanCrclServer = null;
        }
        final Thread crclThreadLocal = this.crclThread;
        if (null != crclThreadLocal) {
            if (crclThreadLocal.isAlive()) {
                errLogPrintln("Interrupting Motoman CRCL server thread");
                try {
                    crclThreadLocal.join(100);
                } catch (InterruptedException ex) {
                    LOGGER.log(Level.SEVERE, "", ex);
                }
                if (crclThreadLocal.isAlive()) {
                    crclThreadLocal.interrupt();
                    try {
                        crclThreadLocal.join(100);
                    } catch (InterruptedException ex) {
                        LOGGER.log(Level.SEVERE, "", ex);
                    }
                }
            }
            this.crclThread = null;
        }
    }

    private void jCheckBoxConnectActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jCheckBoxConnectActionPerformed

        updateConnection();
    }// GEN-LAST:event_jCheckBoxConnectActionPerformed

    private void jCheckBoxDebugActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jCheckBoxDebugActionPerformed
        if (null != motomanCrclServer) {
            motomanCrclServer.setDebug(jCheckBoxDebug.isSelected());
        }
    }// GEN-LAST:event_jCheckBoxDebugActionPerformed

    private void jButtonSendRequestActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jButtonSendRequestActionPerformed

        if (null != motomanCrclServer) {
            try {
                final MotoPlusConnection mpc = motomanCrclServer.getLocalMotoPlusConnection();
                Method mpcMethods[] = mpc.getClass().getDeclaredMethods();
                HashMap<String, Method> methodMap = new HashMap<>();
                for (int i = 0; i < mpcMethods.length; i++) {
                    Method mpcMethod = mpcMethods[i];
                    if (Modifier.isPublic(mpcMethod.getModifiers())) {
                        methodMap.put(mpcMethod.getName(), mpcMethod);
                    }
                }
                String methodNames[] = methodMap.keySet().toArray(new String[0]);
                Arrays.sort(methodNames, 0, methodNames.length);
                String selectedMethodName = queryMethodName(methodNames);
                logPrintln("selectedMethodName = " + selectedMethodName);
                if (null == selectedMethodName || selectedMethodName.length() < 1) {
                    // User probably cancelled.
                    return;
                }
                Method selectedMethod = methodMap.get(selectedMethodName);
                logPrintln("selectedMethod = " + selectedMethod);
                if (null == selectedMethod) {
                    errLogPrintln("selectedMethod = " + selectedMethod);
                    errLogPrintln("methodMap = " + methodMap);
                    JOptionPane.showMessageDialog(this, selectedMethodName + " not found in methodMap");
                    return;
                }
                Object objectParams[] = new Object[selectedMethod.getParameterCount()];
                Container container = getParent();
                JFrame parentJFrame = null;
                while (null != container) {
                    if (container instanceof JFrame) {
                        parentJFrame = (JFrame) container;
                        break;
                    }
                    container = container.getParent();
                }
                Map<String, Object> argsMap = new TreeMap<>();
                final Class<?>[] parameterTypes = selectedMethod.getParameterTypes();
                for (int i = 0; i < objectParams.length; i++) {
                    Class<?> parameterType = parameterTypes[i];
                    logPrintln("parameterType = " + parameterType);
//                    logPrintln("parameterType = " + parameterType);
                    String paramName = selectedMethod.getParameters()[i].getName();
//                    logPrintln("paramName = " + paramName);

                    String queryString = selectedMethodName + " (parameter " + i + ") " + paramName;
                    Object objectParam;
                    if (parameterType.isArray()) {
                        int arrayLength = queryArrayLength(parentJFrame, queryString);
                        Class<?> compenentType = parameterType.getComponentType();
                        if (compenentType.isPrimitive()) {
                            if (compenentType == byte.class) {
                                byte newArray[] = new byte[arrayLength];
                                objectParam = newArray;
                            } else if (compenentType == short.class) {
                                short newArray[] = new short[arrayLength];
                                objectParam = newArray;
                            } else if (compenentType == int.class) {
                                int newArray[] = new int[arrayLength];
                                objectParam = newArray;
                            } else if (compenentType == long.class) {
                                long newArray[] = new long[arrayLength];
                                objectParam = newArray;
                            } else if (compenentType == float.class) {
                                float newArray[] = new float[arrayLength];
                                objectParam = newArray;
                            } else if (compenentType == double.class) {
                                double newArray[] = new double[arrayLength];
                                objectParam = newArray;
                            } else {
                                throw new RuntimeException("primitive type " + compenentType + " not supported");
                            }
                        } else {
                            Object newArray[] = (Object[]) Array.newInstance(compenentType, arrayLength);
                            Constructor<?> constructor = compenentType.getConstructor();
                            if (null == constructor) {
                                System.out.println("componentType=" + compenentType + " for parameterType="
                                        + parameterType + " does not have 0 arguments constructor.");
                            } else {
                                for (int j = 0; j < newArray.length; j++) {
                                    newArray[j] = constructor.newInstance();
                                }
                            }
                            objectParam = newArray;
                        }
                        Object editedObjectParam = ObjTableJPanel.editObject(objectParam, parentJFrame, queryString,
                                true, null, null, null, null);
                        objectParams[i] = editedObjectParam;
                    } else if (parameterType.isEnum()) {
                        objectParam = queryEnumChoice(parameterType, parentJFrame, queryString);
                        objectParams[i] = objectParam;
                    } else if (parameterType.isPrimitive()) {
                        if (parameterType == int.class) {
                            int paramInt = queryInt(parentJFrame, queryString);
                            objectParams[i] = paramInt;
                        } else if (parameterType == double.class) {
                            double paramDouble = queryDouble(parentJFrame, queryString);
                            objectParams[i] = paramDouble;
                        } else {
                            objectParam = parameterType.getConstructor().newInstance();
                            Object editedObjectParam = ObjTableJPanel.editObject(objectParam, parentJFrame, queryString,
                                    true, null, null, null, null);
                            logPrintln("editedObjectParam = " + editedObjectParam);
                            objectParams[i] = editedObjectParam;
                        }
                    } else {
                        objectParam = parameterType.getConstructor().newInstance();
                        Object editedObjectParam = ObjTableJPanel.editObject(objectParam, parentJFrame, queryString,
                                true, null, null, null, null);
                        objectParams[i] = editedObjectParam;
                    }
                    argsMap.put(i + ":" + parameterType + ":" + paramName, objectParams[i]);
                }
                boolean origMpcDebug = mpc.isDebug();
                mpc.setDebug(true);
                logPrintln("argsMap = " + argsMap);
                Object returnValue = selectedMethod.invoke(mpc, objectParams);
                mpc.setDebug(origMpcDebug);
                logPrintln("returnValue = " + returnValue);
                ObjTableJPanel.editObject(returnValue, parentJFrame, "returnValue", true, null, null, null, null);
            } catch (Exception ex) {
                appendLog(ex.getMessage());
                Logger.getLogger(MotomanCRCLServerJPanel.class.getName()).log(Level.SEVERE, "", ex);
            }
        }
    }// GEN-LAST:event_jButtonSendRequestActionPerformed

    @SuppressWarnings("nullness")
    private double queryDouble(@Nullable JFrame parentJFrame, String queryString) throws NumberFormatException {
        double paramDouble = Double.parseDouble(JOptionPane.showInputDialog(parentJFrame, queryString, 0.0));
        return paramDouble;
    }

    @SuppressWarnings("nullness")
    private int queryInt(@Nullable JFrame parentJFrame, String queryString) throws NumberFormatException {
        int paramInt = Integer.parseInt(JOptionPane.showInputDialog(parentJFrame, queryString, 0));
        return paramInt;
    }

    @SuppressWarnings("nullness")
    private Object queryEnumChoice(Class<?> parameterType, @Nullable JFrame parentJFrame, String queryString)
            throws HeadlessException {
        Object objectParam;
        Object[] enumConstants = (Object[]) parameterType.getEnumConstants();
        objectParam = JOptionPane.showInputDialog(parentJFrame, queryString, queryString, JOptionPane.QUESTION_MESSAGE,
                null, enumConstants, enumConstants[0]);
        return objectParam;
    }

    @SuppressWarnings("nullness")
    private int queryArrayLength(@Nullable JFrame parentJFrame, String queryString) throws NumberFormatException {
        int arrayLength = Integer.parseInt(JOptionPane.showInputDialog(parentJFrame, "Length of " + queryString, 1));
        return arrayLength;
    }

    @SuppressWarnings("nullness")
    private String queryMethodName(String[] methodNames) throws HeadlessException {
        String selectedMethodName = (String) JOptionPane.showInputDialog(this, "Mpc Method", "Send Request",
                JOptionPane.QUESTION_MESSAGE, null, methodNames, null);
        return selectedMethodName;
    }

    private void jButtonStatusActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jButtonStatusActionPerformed
        long t0 = System.currentTimeMillis();
        final MotomanCRCLServer motomanCrclServerLocal = motomanCrclServer;
        if (null == motomanCrclServerLocal) {
            JOptionPane.showMessageDialog(this.getParent(), "Motoman CRCL Server not initialized.");
            return;
        }
        motomanCrclServerLocal.getCrclStatusFuture(testWithJoints, testWithAlarms, 0)
                .thenAccept((CRCLStatusType status) -> {
                    try {
                        String text = CRCLSocket.getUtilSocket().statusToPrettyString(status, false);
                        long timeDiff = System.currentTimeMillis() - t0;
                        String lastCommandText = motomanCrclServerLocal.getLastCommandText();
                        String lastCheckMoveCommandText = motomanCrclServerLocal.getLastCheckMoveCommandText();
                        long lastCheckMoveTime = motomanCrclServerLocal.getLastCheckMoveTime();
                        long timeSinceCheckMove = t0 - lastCheckMoveTime;
                        appendLog("\njButtonStatusActionPerformed: \n" + text + "\nlastCommand=\n" + lastCommandText
                                + "\nlastCheckMoveCommand=\n" + lastCheckMoveCommandText + "\timeSinceCheckMove="
                                + timeSinceCheckMove + "\ntimeDiff=" + timeDiff + "\n");
                        NotificationsJPanel.addNotification("Motoman Status", text,null);
                    } catch (Exception ex) {
                        Logger.getLogger(MotomanCRCLServerJPanel.class.getName()).log(Level.SEVERE, "", ex);
                    }
                }).exceptionally((Throwable throwable) -> {
            appendLog(throwable.toString());
            Logger.getLogger(MotomanCRCLServerJPanel.class.getName()).log(Level.SEVERE,
                    "jButtonStatusActionPerformed(" + evt + ")", throwable);
            return null;
        });
    }// GEN-LAST:event_jButtonStatusActionPerformed

    private int testConnections = 25;
    private int testMaxCount = 1000;
    private boolean testWithJoints;
    private boolean testWithAlarms;

    private void jButtonMpcStatusOnlyActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jButtonMpcStatusOnlyActionPerformed
        List<XFuture<Long>> testFutures = new ArrayList<>();

        Object conObject = JOptionPane.showInputDialog("Number of threads & connections", "" + testConnections);
        if (conObject instanceof String) {
            testConnections = Integer.parseInt((String) conObject);
        }

        Object maxCountObject = JOptionPane.showInputDialog("Number of requests", "" + testMaxCount);
        if (maxCountObject instanceof String) {
            testMaxCount = Integer.parseInt((String) maxCountObject);
        }
        Object testWithJointsObject = JOptionPane.showInputDialog("With joints", "" + testWithJoints);
        if (testWithJointsObject instanceof String) {
            testWithJoints = Boolean.parseBoolean((String) testWithJointsObject);
        }
        Object testWithAlarmsObject = JOptionPane.showInputDialog("With alarms", "" + testWithAlarms);
        if (testWithAlarmsObject instanceof String) {
            testWithAlarms = Boolean.parseBoolean((String) testWithAlarmsObject);
        }
        long t0 = System.currentTimeMillis();
        for (int i = 0; i < testConnections; i++) {
            final int finalI = i;
            final int finalMaxCount = testMaxCount;
            testFutures.add(XFuture.supplyAsync("test" + finalI,
                    () -> testMethod(finalI, finalMaxCount, testWithJoints, testWithAlarms)));
        }
        XFuture.allOfWithName("allTests", testFutures).thenRun(() -> {
            long t1 = System.currentTimeMillis();
            JOptionPane.showMessageDialog(this.getParent(), "done " + (t1 - t0));
        });
    }// GEN-LAST:event_jButtonMpcStatusOnlyActionPerformed

    private void jButtonUpdatePerfInfoActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jButtonUpdatePerfInfoActionPerformed
        if (null != motomanCrclServer) {
            String perfInfo = motomanCrclServer.getPerformanceInfo();
            String shortPerfInfo = motomanCrclServer.getShortPerformanceInfo();
            appendLog("PERF_INFO:\n" + perfInfo + "\n(END_PERF_INFO)\n");
            jLabelPerfInfo.setText(shortPerfInfo);
        }
    }// GEN-LAST:event_jButtonUpdatePerfInfoActionPerformed

    private void jTextFieldStatCacheTimeActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jTextFieldStatCacheTimeActionPerformed
        if (null != motomanCrclServer) {
            motomanCrclServer.setStatCacheTime(Integer.parseInt(jTextFieldStatCacheTime.getText().trim()));
        }
    }// GEN-LAST:event_jTextFieldStatCacheTimeActionPerformed

    private void jTextFieldConnectTimeoutActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jTextFieldConnectTimeoutActionPerformed
        setConnectTimeoutMillis(Integer.parseInt(jTextFieldConnectTimeout.getText().trim()));
    }// GEN-LAST:event_jTextFieldConnectTimeoutActionPerformed

    private void jTextFieldReadTimeoutActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jTextFieldReadTimeoutActionPerformed
        setReadTimeoutMillis(Integer.parseInt(jTextFieldReadTimeout.getText().trim()));
    }// GEN-LAST:event_jTextFieldReadTimeoutActionPerformed

    private void jButtonPlotGaurdValuesActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jButtonPlotGaurdValuesActionPerformed
        try {
            diagapplet.plotter.plotterJFrame plotJFrame = new diagapplet.plotter.plotterJFrame();
            if (null != motomanCrclServer) {
                final List<GuardHistoryElement> guardHistoryList = motomanCrclServer.getCrclServerSocket()
                        .getGuardHistoryList();
                plotJFrame.LoadObjectsList("", guardHistoryList);
                plotJFrame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
                plotJFrame.setVisible(true);
            }
        } catch (Exception ex) {
            Logger.getLogger(SimServerJPanel.class.getName()).log(Level.SEVERE, "", ex);
        }
    }// GEN-LAST:event_jButtonPlotGaurdValuesActionPerformed

    private void jButtonStatusCheckInfoActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jButtonStatusCheckInfoActionPerformed
        System.out.println("");
        System.out.flush();
        System.err.println("");
        System.err.flush();
        Thread.dumpStack();
        System.out.println("");
        System.out.flush();
        System.err.println("");
        System.err.flush();
        if (null != motomanCrclServer) {
            String info = motomanCrclServer.getStatusCheckInfo();
            System.out.println("info = " + info);
            appendLog("STATUS_CHECK_INFO:\n" + info + "\n(STATUS_CHECK_INFO)\n");
        } else {
            appendLog("STATUS_CHECK_INFO:\n motomanCrclServer==null\n(STATUS_CHECK_INFO)\n");
        }
        System.out.println("");
        System.out.flush();
        System.err.println("");
        System.err.flush();
    }// GEN-LAST:event_jButtonStatusCheckInfoActionPerformed

    public String getPerformanceInfo() {
        if (null != motomanCrclServer) {
            return motomanCrclServer.getPerformanceInfo();
        } else {
            return "motomanCrclServer=null";
        }
    }

    private long testMethod(int finalI, int maxcount, boolean withJoints, boolean withAlarms) {

        long t0 = System.currentTimeMillis();
        int count = 0;
        final MotomanCRCLServer motomanCrclServerLocal = motomanCrclServer;
        if (null == motomanCrclServerLocal) {
            return -1;
        }
        try ( MotoPlusConnection mpc = MotoPlusConnection.connectionFromSocket(new Socket(motomanHost, motomanPort))) {
            final CommandStateEnumType commandState = CommandStateEnumType.CRCL_DONE;
            int lastSentId = motomanCrclServerLocal.getLastSentTargetId();
            int lastRecvdTargetId = motomanCrclServerLocal.getLastRecvdTargetId();
            int startcount = mpc.readMpcStatusOnly(commandState, withJoints, withAlarms, lastSentId, lastRecvdTargetId)
                    .getStatusCount();
            for (int i = 0; i < maxcount; i++) {
                MpcStatus mpcStatus = mpc.readMpcStatusOnly(commandState, withJoints, withAlarms, lastSentId,
                        lastRecvdTargetId);
                if (null != mpcStatus && mpcStatus.getStatusCount() > 0) {
                    count = mpcStatus.getStatusCount();
                }
            }
            long t1 = System.currentTimeMillis();
            long timediff = t1 - t0;
            System.out.println(finalI + " timediff = " + timediff);
            int countdiff = (count - startcount);
            System.out.println(finalI + " countdiff = " + countdiff);
            final long perCountTime = timediff / countdiff;
            System.out.println(finalI + " (timediff/countdiff) = " + perCountTime);
            return perCountTime;
        } catch (ConnectException ex) {
            final String msg = "Failed to connect to host " + motomanHost + " on port " + motomanPort;
            Logger.getLogger(MotomanCRCLServerJPanel.class.getName()).log(Level.SEVERE, msg, ex);
            NotificationsJPanel.showText(msg);
            NotificationsJPanel.showException(ex);
            return -1;
        } catch (Exception ex) {
            Logger.getLogger(MotomanCRCLServerJPanel.class.getName()).log(Level.SEVERE, "", ex);
            NotificationsJPanel.showException(ex);
            return -1;
        }
    }

    private void updateConnection() {
        if (this.jCheckBoxConnect.isSelected()) {
            try {
                disconnectCrclMotoplus();
                crclPort = Integer.parseInt(jTextFieldCrclPort.getText());
                motomanPort = Integer.parseInt(jTextFieldMotoplusPort.getText().trim());
                motomanHost = jTextFieldMotoplusHost.getText();
                connectCrclMotoplus();
            } catch (Exception ex) {
                errLogPrintln("crclPort = " + crclPort);
                errLogPrintln("motomanPort = " + motomanPort);
                errLogPrintln("motomanHost = " + motomanHost);
                LOGGER.log(Level.SEVERE, "", ex);
            }
        } else {
            disconnectCrclMotoplus();
        }
    }

    private static final Logger LOGGER = Logger.getLogger(MotomanCRCLServerJPanel.class.getName());

    private File propertiesFile;

    /**
     * Get the value of propertiesFile
     *
     * @return the value of propertiesFile
     */
    public File getPropertiesFile() {
        return propertiesFile;
    }

    /**
     * Set the value of propertiesFile
     *
     * @param propertiesFile new value of propertiesFile
     */
    public void setPropertiesFile(File propertiesFile) {
        this.propertiesFile = propertiesFile;
    }

    public void saveProperties() throws IOException {
        Properties props = new Properties();
        props.put(CRCL_PORT_PROPERTY_NAME, jTextFieldCrclPort.getText());
        props.put(MOTOPLUS_PORT_PROPERTY_NAME, jTextFieldMotoplusPort.getText());
        props.put(MOTOPLUS_HOST_PROPERTY_NAME, jTextFieldMotoplusHost.getText());
        try {
            setReadTimeoutMillis(Integer.parseInt(jTextFieldReadTimeout.getText().trim()));
        } catch (Throwable ignored) {

        }
        try {
            setConnectTimeoutMillis(Integer.parseInt(jTextFieldConnectTimeout.getText().trim()));
        } catch (Throwable ignored) {

        }

        props.put("debug", Boolean.toString(jCheckBoxDebug.isSelected()));
        props.put("connectTimeoutMillis", Integer.toString(connectTimeoutMillis));
        props.put("readTimeoutMillis", Integer.toString(readTimeoutMillis));
        final MotomanCRCLServer motomanCrclServerLocal = motomanCrclServer;
        if (null != motomanCrclServerLocal) {
            try {
                motomanCrclServerLocal.setStatCacheTime(Integer.parseInt(jTextFieldStatCacheTime.getText().trim()));
            } catch (Throwable ignored) {
            }
            props.put("statCacheTime", Integer.toString(motomanCrclServerLocal.getStatCacheTime()));
        }
        logPrintln("MotomanCrclServerJPanel saving properties to " + propertiesFile.getCanonicalPath());
        PropertiesUtils.saveProperties(propertiesFile, props);
    }

    private static final String MOTOPLUS_HOST_PROPERTY_NAME = "MOTOPLUS_HOST";
    private static final String MOTOPLUS_PORT_PROPERTY_NAME = "MOTOPLUS_PORT";
    private static final String CRCL_PORT_PROPERTY_NAME = "CRCL_PORT";

    public void setCrclPort(int port) {
        this.jTextFieldCrclPort.setText(Integer.toString(port));
        crclPort = Integer.parseInt(jTextFieldCrclPort.getText());
        updateConnection();
    }

    public int getCrclPort() {
        return crclPort;
    }

    public void loadProperties() throws IOException {
        Properties props = new Properties();
        logPrintln("MotomanCrclServerJPanel loading properties from " + propertiesFile.getCanonicalPath());
        try ( FileReader fr = new FileReader(propertiesFile)) {
            props.load(fr);
        }
        String crclPortString = props.getProperty(CRCL_PORT_PROPERTY_NAME);
        logPrintln("MotomanCrclServerJPanel crclPortString=" + crclPortString);
        if (null != crclPortString) {
            jTextFieldCrclPort.setText(crclPortString);
        }
        String motoplusPortString = props.getProperty(MOTOPLUS_PORT_PROPERTY_NAME);
        if (null != motoplusPortString) {
            jTextFieldMotoplusPort.setText(motoplusPortString);
        }
        String motomanHostString = props.getProperty(MOTOPLUS_HOST_PROPERTY_NAME);
        if (null != motomanHostString) {
            jTextFieldMotoplusHost.setText(motomanHostString);
        }
        String readTimeoutString = props.getProperty("readTimeoutMillis");
        if (null != readTimeoutString) {
            jTextFieldReadTimeout.setText(readTimeoutString.trim());
        }
        String connectTimeoutString = props.getProperty("connectTimeoutMillis");
        if (null != connectTimeoutString) {
            jTextFieldConnectTimeout.setText(connectTimeoutString.trim());
        }
        String statCacheTimeString = props.getProperty("statCacheTime");
        if (null != statCacheTimeString) {
            jTextFieldStatCacheTime.setText(statCacheTimeString.trim());
        }
        crclPort = Integer.parseInt(jTextFieldCrclPort.getText());
        motomanPort = Integer.parseInt(jTextFieldMotoplusPort.getText());
        motomanHost = jTextFieldMotoplusHost.getText();
        String debugString = props.getProperty("debug");
        if (debugString != null && debugString.length() > 0 && Boolean.parseBoolean(debugString)) {
            jCheckBoxDebug.setSelected(true);
        }
    }

	// Variables declaration - do not modify//GEN-BEGIN:variables
	private javax.swing.JButton jButtonMpcStatusOnly;
	private javax.swing.JButton jButtonPlotGaurdValues;
	private javax.swing.JButton jButtonSendRequest;
	private javax.swing.JButton jButtonStatus;
	private javax.swing.JButton jButtonStatusCheckInfo;
	private javax.swing.JButton jButtonUpdatePerfInfo;
	private javax.swing.JCheckBox jCheckBox1;
	private javax.swing.JCheckBox jCheckBoxConnect;
	private javax.swing.JCheckBox jCheckBoxDebug;
	private javax.swing.JLabel jLabel1;
	private javax.swing.JLabel jLabel2;
	private javax.swing.JLabel jLabel3;
	private javax.swing.JLabel jLabel4;
	private javax.swing.JLabel jLabel5;
	private javax.swing.JLabel jLabel6;
	private javax.swing.JLabel jLabelPerfInfo;
	private javax.swing.JPanel jPanelMotoPlusCrclCommunications;
	private javax.swing.JPanel jPanelTelnet;
	private javax.swing.JScrollPane jScrollPane1;
	private javax.swing.JTabbedPane jTabbedPane1;
	private javax.swing.JTextArea jTextAreaErrLog;
	private javax.swing.JTextField jTextFieldConnectTimeout;
	private javax.swing.JTextField jTextFieldCrclPort;
	private javax.swing.JTextField jTextFieldMotoplusHost;
	private javax.swing.JTextField jTextFieldMotoplusPort;
	private javax.swing.JTextField jTextFieldReadTimeout;
	private javax.swing.JTextField jTextFieldStatCacheTime;
	private com.github.wshackle.crcl4java.motoman.ui.TelnetJPanel telnetJPanel1;
	// End of variables declaration//GEN-END:variables
}
