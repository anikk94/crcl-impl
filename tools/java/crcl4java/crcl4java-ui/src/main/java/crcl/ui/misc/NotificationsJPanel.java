/*
 * This software is public domain software, however it is preferred
 * that the following disclaimers be attached.
 * Software Copywrite/Warranty Disclaimer
 * 
 * This software was developed at the National Institute of Standards and
 * Technology by employees of the Federal Government in the course of their
 * official duties. Pursuant to title 17 Section 105 of the United States
 * Code this software is not subject to copyright protection and is in the
 * public domain.
 * 
 * This software is experimental. NIST assumes no responsibility whatsoever 
 * for its use by other parties, and makes no guarantees, expressed or 
 * implied, about its quality, reliability, or any other characteristic. 
 * We would appreciate acknowledgement if the software is used. 
 * This software can be redistributed and/or modified freely provided 
 * that any derivative works bear some notice that they are derived from it, 
 * and any modified versions bear some notice that they have been modified.
 * 
 *  See http://www.copyright.gov/title17/92chap1.html#105
 * 
 */
package crcl.ui.misc;

import crcl.utils.CRCLUtils;
import crcl.utils.XFuture;
import java.awt.Component;
import java.awt.Toolkit;
import java.time.LocalTime;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JFrame;
import javax.swing.JMenuItem;
import javax.swing.JPopupMenu;
import javax.swing.TransferHandler;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import org.checkerframework.checker.nullness.qual.Nullable;

/**
 *
 * @author Will Shackleford {@literal <william.shackleford@nist.gov>}
 */
public class NotificationsJPanel extends javax.swing.JPanel {

    /**
     * Creates new form NotificationsJPanel
     */
    public NotificationsJPanel() {
        initComponents();
        jTable1.getSelectionModel().addListSelectionListener(new ListSelectionListener() {
            @Override
            public void valueChanged(ListSelectionEvent e) {
//                System.out.println("e = " + e);
                int row = jTable1.getSelectedRow();
//                System.out.println("row = " + row);
                int index = (int) jTable1.getValueAt(row, 0);
//                System.out.println("index = " + index);
//                System.out.println("list.size() = " + list.size());
                if(index > 0 && index <= list.size()) {
                    Notification notification = list.get(index -1);
                    final String notificationString = notification.toString();
                    System.out.println("");
                    System.out.println(notificationString);
                    System.out.println("");
                    jTextArea1.setText(notificationString);
                    jFrame.setTitle(notification.title);
                }
            }
        });
        popMenu = createCopyPopMenu();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSplitPane1 = new javax.swing.JSplitPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();

        jSplitPane1.setDividerLocation(200);
        jSplitPane1.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Index", "Time", "Title"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTable1);

        jSplitPane1.setTopComponent(jScrollPane1);

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jTextArea1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTextArea1MouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jTextArea1MousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jTextArea1MouseReleased(evt);
            }
        });
        jScrollPane2.setViewportView(jTextArea1);

        jSplitPane1.setRightComponent(jScrollPane2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jSplitPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 471, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jSplitPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 345, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jTextArea1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTextArea1MouseClicked
        if (evt.isPopupTrigger()) {
            showPopup(evt.getComponent(), evt.getX(), evt.getY());
        }
    }//GEN-LAST:event_jTextArea1MouseClicked

    private void jTextArea1MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTextArea1MousePressed
        if (evt.isPopupTrigger()) {
            showPopup(evt.getComponent(), evt.getX(), evt.getY());
        }
    }//GEN-LAST:event_jTextArea1MousePressed

    private void jTextArea1MouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTextArea1MouseReleased
       if (evt.isPopupTrigger()) {
            showPopup(evt.getComponent(), evt.getX(), evt.getY());
        }
    }//GEN-LAST:event_jTextArea1MouseReleased

    private static class Notification {
        LocalTime time;
        String title;
        String details;
        StackTraceElement []trace;

        @Override
        public String toString() {
            return  "time=" + time + "\n title=" + title + "\n details=" + details + "\n trace=" + XFuture.traceToString(trace);
        }
        
    }
    
//    public static void main(String[] args) {
//        NotificationsJPanel.addNotification("a", "details for a");
//        NotificationsJPanel.addNotification("b", "details for b");
//    }
    
    final private JPopupMenu popMenu;

    private JPopupMenu createCopyPopMenu() {
        JPopupMenu popMenu = new JPopupMenu();
        JMenuItem copyMenuItem = new JMenuItem("Copy");
        copyMenuItem.addActionListener(e -> copyText());
        popMenu.add(copyMenuItem);
        return popMenu;
    }

    private void copyText() {
        final TransferHandler transferHandler = this.jTextArea1.getTransferHandler();
        if (null != transferHandler) {
            transferHandler.exportToClipboard(this.jTextArea1,
                    Toolkit.getDefaultToolkit().getSystemClipboard(),
                    TransferHandler.COPY);
        }
        popMenu.setVisible(false);
    }

    public void showPopup(Component comp, int x, int y) {
        popMenu.show(comp, x, y);
    }

    
    private static @Nullable NotificationsJPanel notificationsJPanel = null;
    private static @Nullable JFrame jFrame = null;
    private static List<Notification> list = new ArrayList<>();
    public static void addNotification(String title, String details) {
        if(null == notificationsJPanel) {
            notificationsJPanel = new NotificationsJPanel();
        }
        if(null == jFrame) {
            jFrame = new JFrame();
            jFrame.setDefaultCloseOperation(JFrame.HIDE_ON_CLOSE);
            jFrame.add(notificationsJPanel);
            jFrame.pack();
        }
        Notification notification = new Notification();
        notification.details = details;
        notification.time = LocalTime.now();
        notification.trace = Thread.currentThread().getStackTrace();
        notification.title = title;
        list.add(notification);
        final TableModel model = notificationsJPanel.jTable1.getModel();
        if(model instanceof DefaultTableModel) {
            DefaultTableModel dtm = (DefaultTableModel) model;
            ((DefaultTableModel) model).addRow(new Object[]{list.size(),notification.time.toString(),title});
        } else {
            throw new RuntimeException("table model is not a DefaultTimeModel");
        }
        jFrame.setTitle(title);
        jFrame.setVisible(true);
        jFrame.toFront();
    }

    
    public static volatile boolean disableShowText = Boolean.parseBoolean("crcl.ui.misc.MultiLineString.disableShowText");

    private static boolean ignoreForceShow = false;

    public static void setIgnoreForceShow(boolean val) {
        ignoreForceShow = val;
    }

    public static boolean getIgnoreForceShow() {
        return ignoreForceShow;
    }

    public static void showException(Throwable throwable) {
        if(CRCLUtils.isGraphicsEnvironmentHeadless()) {
            return;
        }
        addNotification(throwable.getLocalizedMessage(), throwable.toString()+ "\n\n Thrown from:\r\n" + XFuture.traceToString(throwable.getStackTrace()) );
    }

    public static void showException(Throwable throwable, StackTraceElement trace[]) {
        if(CRCLUtils.isGraphicsEnvironmentHeadless()) {
            return;
        }
        addNotification(throwable.getLocalizedMessage(), throwable.toString() + "\n\n Thrown from:\r\n" + XFuture.traceToString(throwable.getStackTrace()) + "\n\n Logged from:\r\n" + XFuture.traceToString(trace));
    }

    public static void showText(String init) {
        if(CRCLUtils.isGraphicsEnvironmentHeadless()) {
            return;
        }
        final int newlineindex = init.indexOf("\n");
        final String title = init.substring(0, Math.min(40, Math.min(init.length(), newlineindex>0?newlineindex:init.length())));
        addNotification(title,init);
    }

    public static void forceShowText(String init, JFrame parentJframe) {
        if(CRCLUtils.isGraphicsEnvironmentHeadless()) {
            return;
        }
        if (null == parentJframe) {
            throw new IllegalArgumentException("null == parentJframe");
        }
        addNotification( "Message from " + parentJframe.getTitle(),init);
    }

   
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextArea jTextArea1;
    // End of variables declaration//GEN-END:variables
}
